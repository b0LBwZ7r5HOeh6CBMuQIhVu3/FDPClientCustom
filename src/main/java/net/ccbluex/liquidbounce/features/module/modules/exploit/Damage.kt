/*
 * FDPClient Hacked Client
 * A free open source mixin-based injection hacked client for Minecraft using Minecraft Forge by LiquidBounce.
 * https://github.com/UnlegitMC/FDPClient/
 */
package net.ccbluex.liquidbounce.features.module.modules.exploit

import net.ccbluex.liquidbounce.LiquidBounce
import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.features.module.*
import net.ccbluex.liquidbounce.utils.ClientUtils
import net.ccbluex.liquidbounce.utils.InventoryUtils
import net.ccbluex.liquidbounce.utils.PacketUtils
import net.ccbluex.liquidbounce.value.*
import net.minecraft.init.Items
import net.minecraft.item.ItemBow
import net.minecraft.network.play.client.C03PacketPlayer
import net.minecraft.network.play.client.C03PacketPlayer.C04PacketPlayerPosition
import net.minecraft.network.play.client.C07PacketPlayerDigging
import net.minecraft.network.play.client.C07PacketPlayerDigging.Action
import net.minecraft.network.play.client.C08PacketPlayerBlockPlacement
import net.minecraft.network.play.server.S19PacketEntityStatus
import net.minecraft.util.BlockPos
import net.minecraft.util.EnumFacing

@ModuleInfo(name = "Damage", category = ModuleCategory.EXPLOIT, canEnable = false)
class Damage : Module() {

    private val modeValue = ListValue("Mode", arrayOf("Fake","NCP", "AAC","Verus", "Item"), "NCP")
    private val damageMode = ListValue("VerusMode", arrayOf("Damage1","Damage2","Damage3","CustomDamage"), "Damage1").displayable {modeValue.equals("Verus")}
    private val packet1 = FloatValue("CustomDamage-Packet1Clip", 4f,0f,5f).displayable { modeValue.equals("Verus") && damageMode.equals("CustomDamage") }
    private val packet2 = FloatValue("CustomDamage-Packet2Clip", -0.2f,-1f,5f).displayable { modeValue.equals("Verus") && damageMode.equals("CustomDamage") }
    private val packet3 = FloatValue("CustomDamage-Packet3Clip", 0.5f,0f,5f).displayable { modeValue.equals("Verus") && damageMode.equals("CustomDamage") }
    private val damageValue = IntegerValue("Damage", 1, 1, 20)
    private val onlyGround = BoolValue("OnlyGround",true)
    private val delayBeforeLaunch = IntegerValue("BowTime", 1, 1, 20)

    private var lastPlayerTick: Long = -1
    private var lastSlot = -1

    override fun onEnable() {
        if (onlyGround.get() && !mc.thePlayer.onGround) {
            return
        }

        when (modeValue.get().toLowerCase()) {
            "item" -> {
                var slot = InventoryUtils.findBall()
                var isBow = false
                lastPlayerTick = -1
                lastSlot = mc.thePlayer.inventory.currentItem

                slot = if (slot == -1) {
                    isBow = true
                    InventoryUtils.findItem(36, 44, Items.bow)
                } else slot

                if(slot == -1) {
                    ClientUtils.displayAlert("Find a egg, bow or ball in your hotbar to self damage")
                    return
                }

                // 切换物品并准备射击
                mc.thePlayer.inventory.currentItem = slot - 36
                mc.playerController.updateController()

                if(isBow) {
                    // 开始拉弓
                    mc.netHandler.addToSendQueue(C08PacketPlayerBlockPlacement(
                        BlockPos(-1, -1, -1),
                        255,
                        mc.thePlayer.inventory.getCurrentItem(),
                        0f,
                        0f,
                        0f
                    ))
                    lastPlayerTick = mc.thePlayer.ticksExisted.toLong()

                    // 等待指定tick后射击
                    if(mc.thePlayer.ticksExisted - lastPlayerTick > delayBeforeLaunch.get()) {
                        mc.netHandler.addToSendQueue(C03PacketPlayer.C05PacketPlayerLook(mc.thePlayer.rotationYaw, -90f, mc.thePlayer.onGround))
                        mc.netHandler.addToSendQueue(C07PacketPlayerDigging(Action.RELEASE_USE_ITEM, BlockPos.ORIGIN, EnumFacing.DOWN))
                    }
                } else {
                    // 非弓物品直接使用
                    mc.netHandler.addToSendQueue(C03PacketPlayer.C05PacketPlayerLook(mc.thePlayer.rotationYaw, 90f, mc.thePlayer.onGround))
                    mc.netHandler.addToSendQueue(C08PacketPlayerBlockPlacement(mc.thePlayer.heldItem))
                }

                // 恢复视角
                mc.netHandler.addToSendQueue(C03PacketPlayer.C05PacketPlayerLook(mc.thePlayer.rotationYaw, mc.thePlayer.rotationPitch, mc.thePlayer.onGround))
            }
            "fake" -> {
                val event = PacketEvent(S19PacketEntityStatus(mc.thePlayer, 2.toByte()), PacketEvent.Type.RECEIVE)
                LiquidBounce.eventManager.callEvent(event)
                if (!event.isCancelled) {
                    mc.thePlayer.handleStatusUpdate(2.toByte())
                }
            }

            "ncp" -> {
                val x = mc.thePlayer.posX
                val y = mc.thePlayer.posY
                val z = mc.thePlayer.posZ

                repeat((55 + damageValue.get() * 10.204).toInt()) {
                    mc.netHandler.addToSendQueue(C04PacketPlayerPosition(x, y + 0.049, z, false))
                    mc.netHandler.addToSendQueue(C04PacketPlayerPosition(x, y, z, false))
                }
                mc.netHandler.addToSendQueue(C04PacketPlayerPosition(x, y, z, true))
            }
            "aac" -> mc.thePlayer.motionY = 4 + damageValue.get().toDouble()
            "verus" -> {
                when (damageMode.get().lowercase()) {
                    "damage1" -> {
                        PacketUtils.sendPacketNoEvent(C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY + 3.05, mc.thePlayer.posZ, false))
                        PacketUtils.sendPacketNoEvent(C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, false))
                        PacketUtils.sendPacketNoEvent(C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY + 0.41999998688697815, mc.thePlayer.posZ, true))
                    }
                    "damage2" -> {
                        PacketUtils.sendPacketNoEvent(C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY + 3.35, mc.thePlayer.posZ, false))
                        PacketUtils.sendPacketNoEvent(C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, false))
                        PacketUtils.sendPacketNoEvent(C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, true))
                    }
                    "damage3" -> {
                        PacketUtils.sendPacketNoEvent(C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY + 4, mc.thePlayer.posZ, false))
                        PacketUtils.sendPacketNoEvent(C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, false))
                        PacketUtils.sendPacketNoEvent(C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, true))
                    }
                    "customdamage" -> {
                        PacketUtils.sendPacketNoEvent(C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY + packet1.get().toDouble(), mc.thePlayer.posZ, false))
                        PacketUtils.sendPacketNoEvent(C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY + packet2.get().toDouble(), mc.thePlayer.posZ, false))
                        PacketUtils.sendPacketNoEvent(C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY + packet3.get().toDouble(), mc.thePlayer.posZ, true))
                    }
                }
            }
        }
    }

}
