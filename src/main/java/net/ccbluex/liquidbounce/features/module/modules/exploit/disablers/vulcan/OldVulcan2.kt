package net.ccbluex.liquidbounce.features.module.modules.exploit.disablers.vulcan

import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.event.UpdateEvent
import net.ccbluex.liquidbounce.event.WorldEvent
import net.ccbluex.liquidbounce.features.module.modules.exploit.disablers.DisablerMode
import net.ccbluex.liquidbounce.utils.PacketUtils
import net.ccbluex.liquidbounce.utils.timer.MSTimer
import net.minecraft.network.Packet
import net.minecraft.network.play.client.C00PacketKeepAlive
import net.minecraft.network.play.client.C03PacketPlayer
import net.minecraft.network.play.client.C0FPacketConfirmTransaction
import net.minecraft.network.play.server.S08PacketPlayerPosLook
import java.util.*


class OldVulcan2 : DisablerMode("OldVulcan2") {
    val vulcanTimer2 = MSTimer()
    val vulcanTimer = MSTimer()
    var expectedTeleport = false
    var toCancel = 0
    var packetLossCounter = 0
    var transactions: LinkedList<C0FPacketConfirmTransaction> = LinkedList()
    var packets: LinkedList<Packet<*>> = LinkedList()

    //    val timer = MSTimer()
    override fun onUpdate(event: UpdateEvent) {

        if (vulcanTimer.hasTimePassed(5000 + (Math.random() * 1000).toLong())) {
            vulcanTimer.reset();
            transactions.forEach(PacketUtils::sendPacketNoEvent);
            transactions.clear();
        }


    }

    override fun onPacket(event: PacketEvent) {
        val p = event.packet
        if (mc.thePlayer.ticksExisted % 20 == 0 && p is C03PacketPlayer) {
            p.y = (p.y - (Math.random() / 100f));
        }
        if (p is S08PacketPlayerPosLook) {
            vulcanTimer2.reset()
            expectedTeleport = true
        }

        if (p is C0FPacketConfirmTransaction) {
            transactions.add(p)
            event.cancelEvent()
        }

        if (event.packet is C00PacketKeepAlive) {
            (p as C00PacketKeepAlive).key = Random().nextInt()
            if (expectedTeleport) {
                event.cancelEvent()
            }
        }
    }

    override fun onWorld(event: WorldEvent) {
        packetLossCounter = 0
        toCancel--

    }
}