package net.ccbluex.liquidbounce.features.module.modules.exploit.phases.vanilla

import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.event.UpdateEvent
import net.ccbluex.liquidbounce.features.module.modules.exploit.phases.PhaseMode
import net.ccbluex.liquidbounce.utils.timer.MSTimer
import net.ccbluex.liquidbounce.value.BoolValue
import net.ccbluex.liquidbounce.value.FloatValue
import net.ccbluex.liquidbounce.value.IntegerValue
import net.minecraft.network.play.client.C03PacketPlayer

class Automatic : PhaseMode("Automatic") {
    private val timer = MSTimer()
    private val offSet = FloatValue("${valuePrefix}Offset", 4.0f, -8.0f, 8.0f)
    private val timervalue = IntegerValue("${valuePrefix}PhaseDelay", 1000, 500, 5000)
    private val freezemotion = BoolValue("${valuePrefix}FreezeMotion", true)
    private var AClip = true
    override fun onEnable() {
        timer.reset()
        AClip = true
    }

    override fun onUpdate(event: UpdateEvent) {
        if (timer.hasTimePassed(timervalue.get().toLong())) {
            if (AClip) {
                AClip = false
                mc.thePlayer.setPosition(mc.thePlayer.posX, mc.thePlayer.posY - offSet.get(), mc.thePlayer.posZ)
            }
        } else if(freezemotion.get()) {
            mc.thePlayer.motionX = 0.0
            mc.thePlayer.motionZ = 0.0
        }
    }

    override fun onPacket(event: PacketEvent) {
        val packet = event.packet
        if(packet is C03PacketPlayer) {
            if (!mc.netHandler.doneLoadingTerrain) {
                timer.reset()
                AClip = true
            }
        }
    }
}